# BGC Analytics - Makefile
# Para Windows: use 'make' via Git Bash ou WSL
# Para PowerShell: use os scripts em /scripts/

.PHONY: help setup build deploy clean status logs test

# Configura√ß√µes
CLUSTER_NAME = bgc
API_IMAGE = bgc/api:dev
INGEST_IMAGE = bgc/ingest:dev
NAMESPACE = default

help: ## Mostra esta ajuda
	@echo "BGC Analytics - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

setup: ## Configura ambiente completo (cluster + postgres + migrations)
	@echo "üöÄ Configurando ambiente BGC..."
	k3d cluster create $(CLUSTER_NAME) --port "8080:80@loadbalancer" || true
	helm repo add bitnami https://charts.bitnami.com/bitnami || true
	helm install bgc-postgres bitnami/postgresql --namespace $(NAMESPACE) || true
	@echo "‚è≥ Aguardando PostgreSQL ficar pronto..."
	kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=postgresql --timeout=300s
	kubectl apply -f deploy/migrations/ || true
	@echo "‚úÖ Ambiente configurado!"

build: ## Faz build de todas as imagens
	@echo "üî® Fazendo build das imagens..."
	docker build -t $(API_IMAGE) services/api/
	docker build -t $(INGEST_IMAGE) services/ingest/
	@echo "‚úÖ Build conclu√≠do!"

import: ## Importa imagens no k3d
	@echo "üì¶ Importando imagens no k3d..."
	k3d image import $(API_IMAGE) $(INGEST_IMAGE) -c $(CLUSTER_NAME)
	@echo "‚úÖ Imagens importadas!"

deploy-api: ## Deploy da API
	@echo "üöÄ Fazendo deploy da API..."
	kubectl apply -f deploy/api/
	kubectl rollout restart deployment/bgc-api || true
	@echo "‚úÖ API deployada!"

deploy-ingest: ## Deploy do servi√ßo de ingest
	@echo "üöÄ Fazendo deploy do ingest..."
	kubectl apply -f deploy/ingest/
	@echo "‚úÖ Ingest deployado!"

deploy: deploy-api deploy-ingest ## Deploy completo (API + ingest)

dev: build import deploy ## Pipeline completo de desenvolvimento (build + import + deploy)

status: ## Mostra status dos pods e servi√ßos
	@echo "üìä Status do cluster:"
	@echo ""
	@echo "=== NODES ==="
	kubectl get nodes
	@echo ""
	@echo "=== PODS ==="
	kubectl get pods
	@echo ""
	@echo "=== SERVICES ==="
	kubectl get services
	@echo ""
	@echo "=== JOBS ==="
	kubectl get jobs --sort-by=.metadata.creationTimestamp | tail -5

logs-api: ## Mostra logs da API
	kubectl logs deployment/bgc-api --tail=50 -f

logs-postgres: ## Mostra logs do PostgreSQL
	kubectl logs deployment/bgc-postgres --tail=50 -f

logs-ingest: ## Mostra logs do √∫ltimo job de ingest
	@echo "üìã √öltimos jobs de ingest:"
	@kubectl get jobs --sort-by=.metadata.creationTimestamp | tail -3
	@echo ""
	@echo "üìú Logs do √∫ltimo job:"
	@kubectl logs job/$$(kubectl get jobs --sort-by=.metadata.creationTimestamp -o name | tail -1 | cut -d'/' -f2) || echo "Nenhum job encontrado"

test: ## Testa conectividade da API (requer port-forward ativo)
	@echo "üß™ Testando API..."
	@echo "üì° Testando endpoint /metrics/resumo:"
	@curl -s http://localhost:3000/metrics/resumo | head -200 || echo "‚ùå Erro - verifique se port-forward est√° ativo: kubectl port-forward service/bgc-api 3000:3000"
	@echo ""
	@echo "üì° Testando endpoint /metrics/pais:"
	@curl -s http://localhost:3000/metrics/pais?limit=3 | head -200 || echo "‚ùå Erro - verifique se port-forward est√° ativo"

port-forward: ## Inicia port-forward da API (rode em terminal separado)
	@echo "üîó Iniciando port-forward da API na porta 3000..."
	@echo "üí° Acesse: http://localhost:3000/metrics/resumo"
	@echo "üí° Para parar: Ctrl+C"
	kubectl port-forward service/bgc-api 3000:3000

psql: ## Acessa PostgreSQL via cliente
	@echo "üêò Conectando ao PostgreSQL..."
	@echo "üí° Senha do postgres:"
	@kubectl get secret bgc-postgres -o jsonpath="{.data.postgres-password}" | base64 -d
	@echo ""
	kubectl run psql-client --rm -it --image bitnami/postgresql:latest -- /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/postgresql/bin/psql -h bgc-postgres -U postgres

load-sample: ## Carrega dados de exemplo (CSV)
	@echo "üìä Carregando dados de exemplo..."
	kubectl create job load-sample-$$(date +%s) --from=cronjob/bgc-ingest -- load-csv /data/sample.csv
	@echo "‚úÖ Job criado! Verifique com: make logs-ingest"

refresh-mv: ## Atualiza Materialized Views
	@echo "üîÑ Atualizando Materialized Views..."
	kubectl create job refresh-mv-$$(date +%s) --from=cronjob/bgc-ingest -- refresh-mv
	@echo "‚úÖ Job criado! Verifique com: make logs-ingest"

clean-jobs: ## Remove jobs antigos (mant√©m √∫ltimos 5)
	@echo "üßπ Limpando jobs antigos..."
	kubectl get jobs --sort-by=.metadata.creationTimestamp -o name | head -n -5 | xargs -r kubectl delete

clean: ## Remove cluster completamente (CUIDADO!)
	@echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso vai remover todo o cluster!"
	@echo "Pressione Ctrl+C nos pr√≥ximos 5 segundos para cancelar..."
	@sleep 5
	k3d cluster delete $(CLUSTER_NAME)
	@echo "üóëÔ∏è  Cluster removido!"

reboot-fix: ## Corrige problemas p√≥s-reboot
	@echo "üîÑ Executando checklist p√≥s-reboot..."
	@echo "üîß Corrigindo kubeconfig..."
	@PORT=$$(docker ps | grep k3d-$(CLUSTER_NAME)-serverlb | sed -n 's/.*0.0.0.0:\([0-9]*\)->6443.*/\1/p'); \
	if [ -n "$$PORT" ]; then \
		kubectl config set-cluster k3d-$(CLUSTER_NAME) --server "https://127.0.0.1:$$PORT"; \
		echo "‚úÖ kubeconfig atualizado para porta $$PORT"; \
	else \
		echo "‚ùå N√£o foi poss√≠vel encontrar porta do serverlb"; \
	fi
	@echo "üì¶ Re-importando imagens..."
	k3d image import $(API_IMAGE) $(INGEST_IMAGE) -c $(CLUSTER_NAME) || true
	@echo "‚úÖ Checklist conclu√≠do!"

# Aliases √∫teis
s: status
b: build
d: deploy
t: test
l: logs-api